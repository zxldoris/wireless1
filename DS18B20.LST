C51 COMPILER V9.02   DS18B20                                                               05/16/2015 20:49:30 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN DS18B20.OBJ
COMPILER INVOKED BY: E:\software\keil\C51\BIN\C51.EXE DS18B20.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg51.h>
   2          #include<DS18B20.h>
   3          
   4          #define _6nop(); {_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();}
   5          //定义适用于STC_Y3,STC_Y5的nop延时
   6          #define STC_Y1 1        //89
   7          #define STC_Y3 3        //12
   8          #define STC_Y5 5        //15
   9          
  10          sbit DS18B20_IO = DS18B20_IO_SET;
  11          
  12          #ifndef STC_YX
              #define STC_YX STC_Y1
              #endif //如果没有定义STC单片机的指令集，则默认为STC_Y5指令集
  15          
  16          #ifndef XTAL
              #define XTAL 11.059200
              #endif //如果没有定义晶振频率，则默认为11.0592M晶振
  19          
  20          /*///////////////////////////////////////////////////////////////////////////////////
  21          *函数名：DelayX10us
  22          *函数功能：延时
  23          *参数列表：
  24          *   t
  25          *       参数类型：unsigned char型整数
  26          *       参数描述：要延时的时长，单位：10us
  27          *返回值：无。
  28          *版本：1.0
  29          *作者：何相龙
  30          *日期：2014年12月11日
  31          *版本：1.1
  32          *版本改动：重写函数，使之能在各种指令集、各晶振频率下工作
  33          *作者：何相龙
  34          *日期：2015年5月11日
  35          *////////////////////////////////////////////////////////////////////////////////////
  36          void DelayX10us(unsigned char t)
  37          {
  38   1              unsigned int i;
  39   1                      i = t * 2;
  40   1              while (--i)
  41   1                      {
  42   2                              _6nop();_6nop();_6nop();_6nop();_6nop();
  43   2                              _6nop();_nop_();_nop_();_nop_();
  44   2                      }
  45   1      }
  46          /*///////////////////////////////////////////////////////////////////////////////////
  47          *函数名：DS18B20_Init
  48          *函数功能：初始化DS18B20
  49          *参数列表：
  50          *   无
  51          *返回值：一个bit型变量，初始化是否正常（1；正常，0：失败）
  52          *版本：1.0
  53          *作者：何相龙
  54          *日期：2015年5月11日
  55          *////////////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.02   DS18B20                                                               05/16/2015 20:49:30 PAGE 2   

  56          bit DS18B20_Init()
  57          {
  58   1              bit temp;
  59   1              EA=0;               //禁能中断，防止时序被干扰
  60   1              DS18B20_IO=0;       //拉低1-wine总线，发送Init信号
  61   1              DelayX10us(60);     //延时600us
  62   1              DS18B20_IO=1;       //释放总线
  63   1              DelayX10us(8);      //延时80us，等待器件响应
  64   1              temp=DS18B20_IO;    //读取总线
  65   1              while(!DS18B20_IO); //等待总线被释放
  66   1              EA=1;               //恢复中断使能
  67   1              return ~temp;       //返回获取到的初始化状态，为符合习惯，进行取反后再返回
  68   1      }
  69          /*///////////////////////////////////////////////////////////////////////////////////
  70          *函数名：DS18B20_Write
  71          *函数功能：向DS18B20写一个unsigned char型的数据或命令
  72          *参数列表：
  73          *   dat
  74          *       参数类型：unsigned char型整数
  75          *       参数描述：要写入的数据或命令
  76          *返回值：无
  77          *版本：1.0
  78          *作者：何相龙
  79          *日期：2014年12月11日
  80          *////////////////////////////////////////////////////////////////////////////////////
  81          void DS18B20_Write(unsigned char dat)
  82          {
  83   1              unsigned char mask;
  84   1              EA=0;                               //禁能中断，防止时序被干扰
  85   1              for(mask=0x01;mask!=0;mask<<=1)     //按位发送数据
  86   1              {
  87   2                      if(dat&mask)                    //获取当前位是否为1
  88   2                      {
  89   3                              DS18B20_IO=0;               //位开始信号
  90   3                              #if STC_YX == STC_Y1
                                      _nop_();                    //稍微延时，防止错误。对不同的单片机指令集做了不同的处理
                                      #else
  93   3                  _6nop();_6nop();
  94   3                              #endif
  95   3                              DS18B20_IO=1;               //拉高总线，发送数据
  96   3                              DelayX10us(8);              //延时80us
  97   3                      }
  98   2                      else                            //当前位为0
  99   2                      {
 100   3                              DS18B20_IO=0;               //拉低总线，发送数据
 101   3                              DelayX10us(8);              //延时80us
 102   3                              DS18B20_IO=1;               //释放总线
 103   3                      }
 104   2                              #if STC_YX == STC_Y1
                                      _nop_();_nop_();            //稍微延时，防止错误。对不同的单片机指令集做了不同的处理
                                      #else
 107   2                  _6nop();_6nop();
 108   2                              #endif
 109   2              }
 110   1              EA=1;                               //恢复中断使能
 111   1      }
 112          /*///////////////////////////////////////////////////////////////////////////////////
 113          *函数名：DS18B20_Read
 114          *函数功能：从DS18B20中读取一位数据
 115          *参数列表：
 116          *   无
 117          *版本：1.0
C51 COMPILER V9.02   DS18B20                                                               05/16/2015 20:49:30 PAGE 3   

 118          *作者：何相龙
 119          *日期：2014年12月11日
 120          *////////////////////////////////////////////////////////////////////////////////////
 121          unsigned char DS18B20_Read()
 122          {
 123   1              unsigned char mask,dat=0;
 124   1              EA=0;                               //禁能中断，防止时序被干扰
 125   1              for(mask=0x01;mask!=0;mask<<=1)     //按位读取数据
 126   1              {
 127   2                      DS18B20_IO=0;                   //拉低总线，发送起始信号
 128   2              #if STC_YX == STC_Y1
                      _nop_();_nop_();                //稍微延时，防止错误。对不同的单片机指令集做了不同的处理
                      #else
 131   2              _6nop();_6nop();
 132   2              #endif
 133   2      
 134   2                      DS18B20_IO=1;                   //释放总线
 135   2                      DelayX10us(1);                  //延时10us
 136   2                      if(DS18B20_IO)dat|=mask;        //读取总线，获取1位数据被保存
 137   2                      DelayX10us(5);                  //延时50us，准备读取下一位数据
 138   2              }
 139   1              EA=1;                               //恢复中断使能
 140   1              return dat;
 141   1      }
 142          /*///////////////////////////////////////////////////////////////////////////////////
 143          *函数名：DS18B20_Start
 144          *函数功能：启动DS18B20温度转换。
 145          *参数列表：
 146          *   *addr
 147          *       参数类型：unsigned char型指针（连续8个unsigned char的数据）
 148          *       参数描述：64字节的器件编号。特别的，Skip ROM时addr[0]请传入0x00
 149          *返回值：一个bit型变量，启动是否正常（1；正常，0：失败）
 150          *版本：1.0
 151          *作者：何相龙
 152          *日期：2014年12月11日
 153          *////////////////////////////////////////////////////////////////////////////////////
 154          bit DS18B20_Start(unsigned char *addr)
 155          {
 156   1              if(!DS18B20_Init())return 0;            //发送初始化信号，如果初始化错误，返回0
 157   1              if(addr[0]==0x00)DS18B20_Write(0xCC);   //如果addr[0]为0x00，发送Skip ROM指令
 158   1              else                                    //否则，发送Match ROM指令，并发送器件ROM号
 159   1              {
 160   2                      DS18B20_Write(0x55);
 161   2                      DS18B20_Write(addr[0]);
 162   2                      DS18B20_Write(addr[1]);
 163   2                      DS18B20_Write(addr[2]);
 164   2                      DS18B20_Write(addr[3]);
 165   2                      DS18B20_Write(addr[4]);
 166   2                      DS18B20_Write(addr[5]);
 167   2                      DS18B20_Write(addr[6]);
 168   2                      DS18B20_Write(addr[7]);
 169   2              }
 170   1              DS18B20_Write(0x44);                    //发送启动温度转换指令
 171   1              return 1;
 172   1      }
 173          /*///////////////////////////////////////////////////////////////////////////////////
 174          *函数名：DS18B20_GetTemp
 175          *函数功能：读取DS18B20，获得温度。
 176          *参数列表：
 177          *   *addr
 178          *       参数类型：unsigned char型指针（连续8个unsigned char的数据）
 179          *       参数描述：64字节的器件编号。特别的，Skip ROM时addr[0]请传入0x00
C51 COMPILER V9.02   DS18B20                                                               05/16/2015 20:49:30 PAGE 4   

 180          *返回值：一个double型变量，获取到的温度值。（发生错误时，返回-999）
 181          *版本：1.0
 182          *作者：何相龙
 183          *日期：2014年12月11日
 184          *版本：1.1
 185          *版本改动：修改返回值类型，直接返回double型数据
 186          *作者：何相龙
 187          *日期：2015年5月11日
 188          *////////////////////////////////////////////////////////////////////////////////////
 189          double DS18B20_GetTemp(unsigned char *addr)
 190          {
 191   1              int temp;                                   //储存温度值技术中级数据
 192   1              unsigned char temp1,temp2;                  //储存温度值技术中级数据
 193   1              unsigned int temp3;                         //储存温度值技术中级数据
 194   1              double tempo;                               //储存最终得到的温度值
 195   1              bit flag = 0;                               //正负标记位
 196   1              if(!DS18B20_Init())return -999;             //发送初始化信号，如果初始化错误，返回-999
 197   1              if(addr[0] == 0x00)DS18B20_Write(0xCC);     //如果addr[0]为0x00，发送Skip ROM指令
 198   1              else                                        //否则，发送Match ROM指令，并发送器件ROM号
 199   1              {
 200   2                      DS18B20_Write(0x55);
 201   2                      DS18B20_Write(addr[0]);
 202   2                      DS18B20_Write(addr[1]);
 203   2                      DS18B20_Write(addr[2]);
 204   2                      DS18B20_Write(addr[3]);
 205   2                      DS18B20_Write(addr[4]);
 206   2                      DS18B20_Write(addr[5]);
 207   2                      DS18B20_Write(addr[6]);
 208   2                      DS18B20_Write(addr[7]);
 209   2              }
 210   1              DS18B20_Write(0xBE);                        //发送读取温度指令
 211   1              temp1=DS18B20_Read();                       //读第一个unsigned char型数据，并暂存
 212   1              temp2=DS18B20_Read();                       //读第二个unsigned char型数据，并暂存
 213   1              temp3=(unsigned int)temp2;                  //将两位unsigned char型数据放到一个unsigned int型变量中
 214   1              temp3 <<= 8;
 215   1              temp3|=(unsigned int)temp1;
 216   1              DelayX10us(15);                             //延时150us
 217   1              if(temp3&0x8000)                            //如果得到的温度值是负值
 218   1              {
 219   2                      temp3 &= 0x07FF;                        //获取温度值的绝对值
 220   2                      temp = -temp3;
 221   2                      flag = 1;                               //设置负值标志
 222   2              }
 223   1              else
 224   1              {
 225   2                      temp3 &= 0x07FF;                        //获取温度值的绝对值
 226   2                      temp = temp3;
 227   2              }
 228   1              tempo = temp >> 4;                          //处理温度值，存储到double型变量tempo中
 229   1              tempo += (temp & 0x08) * 0.5 + (temp & 0x04) * 0.25 + (temp & 0x02) * 0.125 + (temp & 0x01) * 0.6275;
 230   1              return tempo;
 231   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    600    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
C51 COMPILER V9.02   DS18B20                                                               05/16/2015 20:49:30 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
